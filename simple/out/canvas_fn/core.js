// Compiled by ClojureScript 0.0-2127
goog.provide('canvas_fn.core');
goog.require('cljs.core');
goog.require('canvas_fn.util');
goog.require('canvas_fn.util');
goog.require('canvas_fn.canvas');
goog.require('canvas_fn.canvas');
goog.require('domina');
goog.require('domina');
goog.require('clojure.browser.event');
goog.require('clojure.browser.event');
canvas_fn.core.canvas = domina.by_id("draw-canvas");
canvas_fn.core.model = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.constant$keyword$18,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.constant$keyword$16,0,cljs.core.constant$keyword$17,0], null)], null));
canvas_fn.core.draw_blue_circle = (function draw_blue_circle(canvas,pos){return canvas_fn.canvas.draw_circle(canvas,pos,200,[cljs.core.str("rgb(200,200,255)")].join(''));
});
canvas_fn.core.render = (function render(canvas,model){canvas_fn.canvas.init_canvas(canvas);
return canvas_fn.core.draw_blue_circle(canvas,cljs.core.constant$keyword$18.cljs$core$IFn$_invoke$arity$1(model));
});
canvas_fn.core.move_ball_x = (function move_ball_x(model){return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(model,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.constant$keyword$18,cljs.core.constant$keyword$16], null),(function (old){return cljs.core.mod((old + 1),canvas_fn.core.canvas.width);
}));
});
canvas_fn.core.move_ball_y = (function move_ball_y(model){return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(model,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.constant$keyword$18,cljs.core.constant$keyword$17], null),(function (old){return cljs.core.mod((old + 1),canvas_fn.core.canvas.height);
}));
});
canvas_fn.core.update_model = (function update_model(){return cljs.core.reset_BANG_(canvas_fn.core.model,canvas_fn.core.move_ball_y(canvas_fn.core.move_ball_x(cljs.core.deref(canvas_fn.core.model))));
});
canvas_fn.core.main = (function main(){canvas_fn.core.update_model();
return canvas_fn.core.render(canvas_fn.core.canvas,cljs.core.deref(canvas_fn.core.model));
});
canvas_fn.core.animate = (function animate(){(canvas_fn.canvas.animate.cljs$core$IFn$_invoke$arity$1 ? canvas_fn.canvas.animate.cljs$core$IFn$_invoke$arity$1(animate) : canvas_fn.canvas.animate.call(null,animate));
return canvas_fn.core.main();
});
canvas_fn.util.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Start animation"], 0));
canvas_fn.core.animate();
