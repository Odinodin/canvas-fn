<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1389082679794">{:repl-history {:ide [], :local [&quot;(!reset model (fn [old] old))&quot; &quot;(!swap model )&quot; &quot;(use 'clojure.core)&quot; &quot;\n(!swap model )&quot; &quot;ns&quot; &quot;*ns*&quot; &quot;(model\n  )&quot; &quot;(model)&quot; &quot;model&quot; &quot;(!swap model)&quot; &quot;stuff&quot; &quot;(+ 1 1)&quot; &quot;(+ 1 (* 2 2))&quot; &quot;(infix (1 + 1))&quot; &quot;(def somearray [1 2 3])&quot; &quot;(get somearray 1)&quot; &quot;(get somearray 4)&quot; &quot;(def position {:x 10 :y 20})&quot; &quot;(get position :x)&quot; &quot;(:x position)&quot; &quot;(position :x)&quot; &quot;(:x nil)&quot; &quot;(def updatedPos (assoc position :x 40 ))&quot; &quot;updatedPos&quot; &quot;position&quot; &quot;(def a-value (atom 2))&quot; &quot;a-value&quot; &quot;(deref a-value)&quot; &quot;@a-value&quot; &quot;(reset! a-value 10)&quot; &quot;(def model (atom {:x 1 :y 2}))&quot; &quot;(doc reset)&quot; &quot;(swap! model (fn [old] old))&quot; &quot;(swap! model (fn [old] (assoc old :x 2)))&quot; &quot;(assoc model :x 1 :y 2)&quot; &quot;(assoc @model :x 1 :y 2)&quot; &quot;(assoc @model :x 3 :y 2)&quot; &quot;(def model (atom {:x 50 :y 100}))&quot; &quot;(defn update-model []\n  (do\n    (pr \&quot;update model\&quot;)\n    (swap! model (fn [old] (assoc old :x (mod (:x old) 100))))))&quot; &quot;(mod 50 100)&quot; &quot;(defn update-model []\n  (do\n    (pr \&quot;update model\&quot;)\n    (swap! model (fn [old] (assoc old :x (inc (mod (:x old)) 100))))))&quot; &quot;(defn update-model []\n  (do\n    (pr \&quot;update model\&quot;)\n    (swap! model (fn [old] (assoc old :x (inc (mod (:x old))) 100)))))&quot; &quot;(defn update-model []\n  (do\n    (pr \&quot;update model\&quot;)\n    (swap! model (fn [old] (assoc old :x (mod (inc (:x old)) 100))))))&quot; &quot;(update-model)&quot; &quot;(reduce [10] +)&quot; &quot;(def model (atom {:ball {:x 50 :y 100}}))&quot; &quot;(:ball @model)&quot; &quot;(:x (:ball @model))&quot; &quot;@model&quot; &quot;(update-in model [:ball :x] (fn [old] (mod (inc old) 100)))&quot; &quot;(update-in model [:ball :x] (fn [old] old))&quot; &quot;(update-in @model [:ball :x] (fn [old] old))&quot; &quot;(update-in @model [:ball :x] (fn [old] (mod (inc old) 100)))&quot; &quot;(reset! model (update-in @model [:ball :x] (fn [old] (mod (inc old) 100))))\n&quot; &quot;(update-in @model [:ball :x] (fn [old] (mod (inc old) 400)))&quot; &quot;(reset! model (update-in @model [:ball :x] (fn [old] (mod (inc old) 400))))\n&quot; &quot;(. Math sin 10)\n&quot; &quot;(. Math sin 11)\n&quot; &quot;(abs -1)\n&quot; &quot;(. Math abs (. Math sin 11))\n&quot; &quot;(. Math abs (. Math sin 12))\n&quot; &quot;(. Math abs (. Math sin 13))\n&quot; &quot;(* 10 (. Math abs (. Math sin 13)))\n&quot; &quot;(* 12 (. Math abs (. Math sin 13)))\n&quot; &quot;(* 20 (. Math abs (. Math sin 13)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 0)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 90)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 180)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 80)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 70)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 81)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 82)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 83)))\n&quot; &quot;(* 400 (. Math abs (. Math sin 84)))\n&quot; &quot;\n(comment asdas...)&quot; &quot;\n(comment asdas...)()&quot; &quot;\n(comment asdas...(:::_) )&quot; &quot;\n(+ 1 2 (comment (- 1 2)))&quot; &quot;\n(+ 1 2 #_(- 1 2))&quot; &quot;\n(+ 1 2 #_(monkeys!))&quot; &quot;\n(+ 1 2 #_( [[[[[))&quot; &quot;\n(+ 1 2 #_(monkeys [[[[[))&quot; &quot;\n(+ 1 2 #_(xx xxx xxxxxx))&quot; &quot;\n(+ 1 2 #_( [[[ ))&quot; &quot;\n(+ 1 2 #_( [ ))&quot; &quot;\n(+ 1 2 #_( { ))&quot;], :remote []}}</component>
</project>

